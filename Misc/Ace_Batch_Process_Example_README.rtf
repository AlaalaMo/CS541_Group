{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww18380\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 # S. Tang: Snippet of code below outputs progress (scores in this case) every 10th episode to stdout (display) using pickle.\
# When using Ace/Turing and SLURM (for batch processing), the output is saved to a text file named, slurm-jobid, by default.\
# The code below also save the models every 1000th episodes so that one can resume training at any point. This was done \
# because if the training exceeds 12 hours (Ace) or 24 hours (Turning), the job errs out and nothing is saved.\
\
\
import pickle\
\
\
                    if episode % 10 == 9:  # Print every 10th episode\
                        print('[%d, %5d] Score/Reward: %7.3f' %\
                              (episode + 1, step, scores[episode]))  # -epStart required when resuming training.\
\
                    if episode % 1000 == 999:  # Save models every 1000th episodes just in case.\
                        torch.save(self.Q.state_dict(),\
                                   './Breakout_DDQN_' + str(dev) + '_Model_' + str(episode + 1) + '_' +\
                                   str(step) + '.pth')\
                        torch.save(self.TargetQ.state_dict(),\
                                   './Breakout_DDQN_' + str(dev) + '_TargetModel_' + str(episode + 1) + '_'\
                                   + str(step) + '.pth')\
                        outFile = np.array([episodeList, iterSteps, scores]).transpose()\
                        with open('Breakout_Rewards_Results_pkl_' + str(episode + 1) + '_' + str(step) + '.data',\
                                  'wb') as fid:\
                            pickle.dump(outFile, fid)\
\
        # Set up output file names to include device type and episode number.\
        if dev.type != 'cpu':\
            devName = 'gpu'\
        else:\
            devName = 'cpu'\
\
        epName = episode + 1\
\
        # Dump the output into a binary file to be plotted later using pickle.\
        outFile = [episodeList, iterSteps, scores]\
        outFile = np.array(outFile).transpose()\
        with open('Breakout_Rewards_Results_pkl_' + str(epName) + '_' + str(step) + '.data', 'wb') as fid:\
            pickle.dump(outFile, fid)\
\
        # Save both networks/models.\
        torch.save(self.Q.state_dict(), './Breakout_DDQN_' + str(devName) + '_Model_' + str(epName) + '_' +\
                   str(step) + '.pth')\
        torch.save(self.TargetQ.state_dict(), './Breakout_DDQN_' + str(devName) + '_TargetModel_' + str(epName) + '_'\
                   + str(step) + '.pth')\
}